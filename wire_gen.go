// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"payslip-generation-system/config"
	"payslip-generation-system/config/infra"
	"payslip-generation-system/config/router"
	"payslip-generation-system/internal/handler"
	"payslip-generation-system/internal/repository/auth"
	"payslip-generation-system/internal/repository/tx"
	"payslip-generation-system/internal/usecase"
	"payslip-generation-system/pkg/log"
	"payslip-generation-system/transport"
)

// Injectors from wire.go:

func ServerApp() *transport.HTTP {
	configConfig := config.ProvideConfig()
	logCustom := log.ProvideLogger()
	infraInfra := infra.ProvideInfra(configConfig, logCustom)
	txManager := tx.ProvideTxManager(infraInfra)
	iAuthRepo := auth.ProvideAuthRepo(infraInfra)
	iUsecase := usecase.ProvideUsc(logCustom, configConfig, txManager, iAuthRepo)
	handlerHandler := handler.ProvideHandler(configConfig, logCustom, iUsecase)
	route := router.ProvideRoute(configConfig, logCustom, handlerHandler, iUsecase)
	http := transport.ProvideHttp(configConfig, route, logCustom)
	return http
}

// wire.go:

var Configs = wire.NewSet(config.ProvideConfig)

var LoggerSet = wire.NewSet(log.ProvideLogger)

var InfraSet = wire.NewSet(infra.ProvideInfra)

var RepoSet = wire.NewSet(auth.ProvideAuthRepo, tx.ProvideTxManager)

var InternalDomain = wire.NewSet(
	RepoSet, usecase.ProvideUsc,
)

var Handler = wire.NewSet(handler.ProvideHandler)

var Server = wire.NewSet(
	Handler, router.ProvideRoute, transport.ProvideHttp,
)
